module FSM(
   input clk , reset,
   input in_seq,
   output moore_Y, mealy_Y
);

   FSM_moore dut_moore(clk, reset , in_seq, moore_Y);
   FSM_mealy dut_mealy(clk, reset , in_seq, mealy_Y );
      endmodule 
   
// moore machine design ------------------------------------


module fsm_moore(
   input clk, reset, 
   input in_seq,
   output logic moore_Y
);
//moore state
 parameter S0 = 3'b000;  
 parameter S1 = 3'b001;
 parameter S2 = 3'b010;
 parameter S3 = 3'b011;
 parameter S4 = 3'b100;
 parameter S5 = 3'b101; // output
 parameter S6 = 3'b110; // output

logic [2:0] state_moore,  next_state_moore;

//statw register
always_ff @ (posedge clk , posedge reset ) begin
	if(reset)
		state_moore<=S0;
	else 
		state_moore<=  next_state_moore;
end   

// next state logic
always_comb begin
	case(state_moore)
		S0:
			if (in_seq)
				next_state_moore = S0;
			else 
				next_state_moore = S1;
		S1:
			if (in_seq)
				next_state_moore = S2;
			else 
				next_state_moore = S1;
		S2:
			if (in_seq)
				next_state_moore = S0;
			else 
				next_state_moore = S1;
		default : next_state_moore =S0;
	endcase
end

// out put logic 

    assign moore_Y = (state_moore == S2);
   endmodule

// mealy machine
module fsm_mealy   (
            input clk, reset, 
   input in_seq,
   output logic mealy_Y
);

 parameter S0 = 1'b0;  // paeameter 바꿔주기
 parameter S1 = 1'b1;

logic state_mealy,  next_state_mealy;// 1:0으로 바꾸기?

//state register
always_ff @ (posedge clk , posedge reset ) begin
       if(reset) begin
    state_mealy<=S0;
    end  
    else begin 
         state_mealy<=  next_state_mealy;
    end   
end
// next state logic
always_comb begin
   case(state_mealy)
     S0:begin 
        if (in_seq)
   next_state_mealy <= S0;
        else 
            next_state_mealy = S1;
  
        end
        S1:
        if (in_seq)
   next_state_mealy <= S0;
        else 
            next_state_mealy <= S1;

   default : next_state_mealy <=S0;
         endcase
end

// out put logic 
assign mealy_Y=(in_seq & state_mealy==S1);


endmodule

 